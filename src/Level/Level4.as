package Level 
{
	/**
     * ...
     * @author 
     */
  import engine.AssetRegistry
  import flash.geom.Rectangle;
  import flash.system.ImageDecodingPolicy;
  import starling.display.Image;
  import starling.display.BlendMode;
  import starling.textures.TextureSmoothing;
  import UI.HUD;
  import Eggs.Egg;
  import engine.SaveGame;
  import starling.core.Starling;
  import com.gskinner.motion.GTween;
  import com.gskinner.motion.easing.Back;
  
  
  public class Level4 extends LevelState 
  {
    private var _winningPositions:Array;
	  private var _winCondition:int;
    private var _showJumpMessage:Boolean = false;
    
    public function Level4() 
    {
      AssetRegistry.loadGraphics([AssetRegistry.SNAKE, AssetRegistry.SCORING]);
      _levelNr = 4;
      SaveGame.levelName = AssetRegistry.Strings.LEVEL4NAME;
      _rottenEnabled = true;
      _winningPositions = [2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428];
      if (SaveGame.difficulty == 1) {
	      _winCondition = 5;
        _lid = "50422f0d563d8a51b7002a38";
	    } else {
		    _winCondition = 7;
        _lid = "50422f17563d8a570c002638";
	    }

      super();
      _startPos.x = 20;
      _startPos.y = 20;
      startAt(_startPos.x, _startPos.y);
      updateCamera();
    }
    
    
    
    override protected function addSpawnMap():void {
      _spawnMap = [, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047];
    }
    override protected function setBoundaries():void {
      _levelBoundaries = new Rectangle(10, 7, 42, 33);
    }
    
    override protected function addBackground():void {
      _bgTexture = AssetRegistry.LevelAtlas.getTexture("Level4mitRahmen");
      _bg = new Image(_bgTexture);
      _bg.blendMode = BlendMode.NONE;
      _levelStage.addChild(_bg);

      var palmtree:Image = new Image(AssetRegistry.SnakeAtlas.getTexture("level4_palme_stamm"));
      palmtree.x = 512;
      palmtree.y = 241;
     _levelStage.addChild(palmtree);      
    }
    
    override protected function addAboveSnake():void {
      var palmleaves:Image = new Image(AssetRegistry.SnakeAtlas.getTexture("level4_palme_bl√§tter"));
      palmleaves.x = 510;
      palmleaves.y = 251;
      _levelStage.addChild(palmleaves);
    }
    
    override public function dispose():void {
      super.dispose();
    }
    
    override public function addFrame():void {
      // Not needed here.
    }    
    
    override protected function showObjective():void
    {     
	  var _neededSpeed:Image = new Image(AssetRegistry.SnakeAtlas.getTexture("icon-speed"));
	  if (SaveGame.difficulty == 1) {	
		showObjectiveBox(AssetRegistry.Strings.LEVEL4A, [[_neededSpeed,"= 5"] ] );
	  } else {
	    showObjectiveBox(AssetRegistry.Strings.LEVEL4B, [[_neededSpeed,"= 7"] ] );
	  }
    }    
    
    override protected function addHud():void {
      //_hud = new HUD(new Radar(_eggs, _snake), ["lifes", "time", "speed", "poison"], this);
      
      _hud = new HUD(this);
      var iconsCfg:Object = {
        lives: { type: "lives", pos: 1, watching: "lives" },
        time: { type: "time", pos: 2, watching: "overallTime" },
        speed: { type: "speed", pos: 3, watching: "speed"},
        poison: { type: "poison", pos: 4, watching: "poisonCount"}
      }
      
      _hud.iconsCfg = iconsCfg;
      addChild(_hud);
    }

    override protected function addObstacles():void
    {
      var pos:Array = [1552, 1489, 1488, 1551, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2381, 2445, 2446, 2444, 2354, 2467, 2468, 2469, 2470, 2471, 2344, 2345, 2346, 2347, 2348, 2477, 2478, 2479, 2352, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2480, 2489, 2490, 2491, 2492, 2493, 2349, 2350, 2488, 2342, 2343, 2472, 2473, 2474, 2475, 2476, 2368, 2369, 2351, 2341, 2372, 2509, 2502, 2494, 2504, 2505, 2506, 2370, 2371, 2500, 2501, 2383, 2503, 2376, 2495, 2496, 2507, 2508, 2499, 2382, 2373, 2374, 2375, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2378, 2379, 2380, 2497, 2498, 2377, 2366, 2431];
      
      for (var i:int = 0; i < pos.length; i++)
      {
        _obstacles[pos[i]] = true;
      }
    } 
    
    override protected function checkLost():void {
      if (_poisonEggs > 4) {
        lose();
      }
      super.checkLost();
    }
    
    override public function spawnRandomEgg():void {
      var egg:Egg;
      var type:int;
      var types:Array = [AssetRegistry.EGGA, AssetRegistry.EGGZERO];
      type = types[Math.floor(Math.random() * types.length)];
      
      egg = _eggs.recycleEgg(0, 0, type);
      
      placeEgg(egg);
    } 
    
    override protected function checkWin():void {
      if (_snake.mps >= SaveGame.startSpeed + _winCondition && !_showJumpMessage) {
        showMessage(AssetRegistry.Strings.JUMPMESSAGE);
        _showJumpMessage = true;
      }
      if (_winningPositions.indexOf(_snake.head.tileY * _tileWidth + _snake.head.tileX) != -1 && _snake.mps >= SaveGame.startSpeed + _winCondition && !_level4Animation) {
        _snake.mps = 200;
        _level4Animation = true;
        removeChild(_hud);
        bonusTimer = 0;
        var animation:GTween = new GTween(_snake, 1, { y: 600 }, { ease: Back.easeIn, onComplete: function(tween:GTween):void { animation.end(); }} );
        _tweens.push(animation);
        
      }
      if (_snake.tail.y >= 600 && _level4Animation) {
        win();
      }
      trace(_snake.mps);
    }
  }

}
